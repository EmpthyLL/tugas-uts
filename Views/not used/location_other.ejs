<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            text-align: center;
        }

        h1 {
            color: #333;
            font-size: 36px;
            margin-top: 20px;
            font-weight: bold;
            padding-bottom: 20px;
        }

        #map {
            width: 90%;
            height: 500px;
            margin: 20px 0;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            border: 2px solid #ddd;
        }

        #pac-input {
            width: 80%;
            padding: 10px;
            font-size: 16px;
            border-radius: 4px;
            border: 1px solid #ccc;
            margin: 10px;
        }
    </style>
</head>

<body>
    <h1><%= title %></h1>
    <input id="pac-input" type="text" placeholder="Search for a destination">
    <div id="map"></div>

    <div id="data-container" data-user-location-lat="<%= userLocation.lat %>"
        data-user-location-lng="<%= userLocation.lng %>"></div>

    <script async defer src="https://maps.gomaps.pro/maps/api/js?key=AlzaSy6SOVreE3Hs7ku1nRXlx2AX50fUd5fN_eI&libraries=places&callback=initMap"></script>

    <script>
        let map, directionsService, directionsRenderer, destinationMarker;

        function initMap() {
            const dataContainer = document.getElementById('data-container');
            
            const userLocation = {
                lat: parseFloat(dataContainer.getAttribute('data-user-location-lat')),
                lng: parseFloat(dataContainer.getAttribute('data-user-location-lng'))
            };

            map = new google.maps.Map(document.getElementById('map'), {
                center: userLocation,
                zoom: 13,
            });

            // Initialize Directions services
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({ map: map });

            // Add user marker
            new google.maps.Marker({
                position: userLocation,
                map: map,
                title: "You are here"
            });

            // Set up autocomplete for the search input
            const input = document.getElementById('pac-input');
            const autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', () => {
                const place = autocomplete.getPlace();

                if (!place.geometry || !place.geometry.location) {
                    alert("No details available for input: '" + place.name + "'");
                    return;
                }

                // Remove existing destination marker if any
                if (destinationMarker) {
                    destinationMarker.setMap(null);
                }

                // Add destination marker
                destinationMarker = new google.maps.Marker({
                    position: place.geometry.location,
                    map: map,
                    title: "Destination"
                });

                // Update the route to the new destination
                calculateAndDisplayRoute(userLocation, place.geometry.location);
            });
        }

        function calculateAndDisplayRoute(origin, destination) {
            const request = {
                origin: origin,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING,
            };

            directionsService.route(request, (result, status) => {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(result);
                } else {
                    alert("Directions request failed due to " + status);
                }
            });
        }
    </script>
</body>
</html>