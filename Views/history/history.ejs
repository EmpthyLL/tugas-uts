<div class="max-w-4xl mx-auto my-8 p-6 rounded-lg bg-gray-50 dark:bg-gray-900 shadow-lg">
  <p class="font-bold text-center text-3xl text-gray-800 dark:text-white">Order History</p>

  <div id="order-history" class="space-y-6 mt-6">
    <!-- Initial content will be empty and populated via WebSocket -->
  </div>

  <p id="no-orders" class="text-center text-gray-500 dark:text-gray-400 text-lg mt-6 hidden">
    You haven't placed any orders yet.
  </p>
</div>

<script>
  // Establish WebSocket connection
  const socket = new WebSocket('ws://localhost:3006'); // Replace with your WebSocket server address

  const orderHistoryContainer = document.getElementById('order-history');
  const noOrdersMessage = document.getElementById('no-orders');

  // Handle WebSocket connection
  socket.onopen = () => {
    console.log('Connected to WebSocket server');
  };

  socket.onmessage = (event) => {
    const data = JSON.parse(event.data);

    if (data.action === 'updateOrderHistory') {
      updateOrderHistory(data.orders);
    }
  };

  socket.onerror = (error) => {
    console.error('WebSocket error:', error);
  };

  socket.onclose = () => {
    console.log('WebSocket connection closed');
  };

  function updateOrderHistory(orders) {
    // Clear existing content
    orderHistoryContainer.innerHTML = '';

    if (orders.length === 0) {
      noOrdersMessage.classList.remove('hidden');
      return;
    }

    noOrdersMessage.classList.add('hidden');

    orders.forEach((item) => {
      const orderElement = document.createElement('a');
      orderElement.href = `/history/${item.uuid}`;
      orderElement.className = 'flex items-center space-x-6 p-5 bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 transition-transform transform hover:scale-105 hover:shadow-xl';

      orderElement.innerHTML = `
        <div class="flex flex-col space-y-4 w-full">
          <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
            ${new Date(item.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
          </p>

          <div class="flex items-center space-x-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="8" cy="21" r="1"/>
              <circle cx="19" cy="21" r="1"/>
              <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"/>
            </svg>
            <p class="text-lg font-semibold text-gray-800 dark:text-white">
              Rp ${Math.floor(item.cart.total).toLocaleString('id-ID')}
            </p>
          </div>

          <div class="flex justify-between items-center mt-3">
            <p class="text-sm text-gray-700 dark:text-gray-300">Total Items: ${item.cart.items.length}</p>
            <div>
              ${getStatusBadge(item.status)}
            </div>
          </div>
        </div>
      `;

      orderHistoryContainer.appendChild(orderElement);
    });
  }

  function getStatusBadge(status) {
    if (!status) {
      return '<span class="text-gray-500 bg-gray-200 dark:bg-gray-700 px-3 py-1 rounded-lg text-sm font-medium">Unknown Status</span>';
    }

    const statusLower = status.toLowerCase();

    if (statusLower === 'completed') {
      return '<span class="text-green-600 bg-green-100 dark:bg-green-900 px-3 py-1 rounded-lg text-sm font-medium">Completed</span>';
    } else if (statusLower === 'inprocess') {
      return '<span class="text-yellow-600 bg-yellow-100 dark:bg-yellow-900 px-3 py-1 rounded-lg text-sm font-medium">In Process</span>';
    } else {
      return '<span class="text-red-600 bg-red-100 dark:bg-red-900 px-3 py-1 rounded-lg text-sm font-medium">' + status + '</span>';
    }
  }
</script>
