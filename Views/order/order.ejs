<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
/>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
<style>
  h1 {
    font-size: 36px;
    color: #333;
    margin-top: 20px;
    font-weight: bold;
    text-align: center;
  }

  .leaflet-container {
    border-radius: 12px;
  }

  .leaflet-routing-container .leaflet-routing-alt {
    display: none;
  }

  .info-box {
    color: white;
    padding: 10px;
    border-radius: 6px;
    margin: 10px 0;
    font-size: 16px;
    background-color: #4caf50;
  }

  .distance-info {
    background-color: #ff9800;
  }

  @media (max-width: 768px) {
    #map {
      height: 400px;
    }

    h1 {
      font-size: 28px;
    }

    #driver {
      width: 90%;
    }
  }
</style>

<div
  class="bg-gray-100 font-sans min-h-screen p-4 flex flex-col items-center justify-center"
>
  <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mt-5 text-center">
    Location
  </h1>

  <!-- Map and Driver Section -->
  <div
    class="w-full flex z-0 flex-col md:flex-row items-center justify-center md:space-x-6 md:w-11/12 xl:w-10/12 mt-6"
  >
    <!-- Map Section (2/3 of screen width on larger screens) -->
    <div
      id="map"
      class="w-full md:w-2/3 h-[500px] md:h-[600px] my-6 rounded-lg shadow-lg transition-all duration-300 ease-in-out"
    ></div>
  </div>

  <!-- Shopping and Order Summary Section -->
  <div
    class="w-full md:w-11/12 xl:w-10/12 flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-6 mt-6"
  >
    <!-- Shopping Bag -->
    <div class="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-lg">
      <h2
        class="text-2xl font-bold mb-4 text-gradient bg-gradient-to-r from-blue-500 to-purple-900 bg-clip-text text-transparent"
      >
        Shopping Bag
      </h2>

      <% cart.items.forEach(item => { %>
      <div
        class="flex items-start border-b border-gray-300 pb-4 mb-4"
        id="product-<%= item.id %>"
      >
        <a href="/product/<%= item.id %>">
          <img
            src="<%= item.thumbnail %>"
            alt="<%= item.title %>"
            class="w-20 h-20 md:w-24 md:h-24 object-cover rounded-md mr-4"
          />
        </a>
        <div class="flex-1">
          <h3 class="font-semibold text-lg"><%= item.title %></h3>
          <p class="text-gray-500">Price: <%= formatCurrency(item.price) %></p>
          <p class="text-gray-500">Brand: <%= item.brand %></p>
          <p class="text-gray-500">Category: <%= item.category %></p>
        </div>
        <div class="flex flex-col items-end ml-6">
          <label class="text-gray-500 mb-1">Quantity</label>
          <p class="mt-4 font-bold text-lg"><%= item.quantity %></p>
          <p class="mt-4 font-bold text-lg">
            <%= formatCurrency(item.total) %>
          </p>
        </div>
      </div>
      <% }) %>
    </div>

    <!-- Order Summary -->
    <div class="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-lg">
      <h2
        class="text-2xl font-bold mb-4 text-gradient bg-gradient-to-r from-blue-500 to-purple-900 bg-clip-text text-transparent"
      >
        Order Summary
      </h2>

      <div class="space-y-2" id="order-summary">
        <div class="flex justify-between">
          <span>Subtotal</span>
          <span id="subtotal"><%= formatCurrency(cart.cart_total) %></span>
        </div>
        <div class="flex justify-between">
          <span>Delivery</span>
          <span id="delivery">0</span>
        </div>
        <div class="flex justify-between">
          <span>Tax</span>
          <span><%= formatCurrency(cart.tax) %></span>
        </div>
        <div class="flex justify-between text-red-600">
          <span>Member Discount</span>
          <span>- <%= formatCurrency(cart.member_discount) %></span>
        </div>
      </div>

      <div class="flex justify-between text-xl font-bold mt-6">
        <span>Total</span>
        <span id="total"><%= formatCurrency(cart.total) %></span>
      </div>
      <button
        id="order"
        class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition duration-300 ease-in-out mt-5"
      >
        Order Driver
      </button>
    </div>
  </div>
</div>

<script
  src="https://cdnjs.cloudflare.com/ajax/libs/decimal.js/9.0.0/decimal.js"
  integrity="sha512-j7XClNLgl5hebr3jl5xMoEpuaniuP60N1Sz62xHwJSbuCgUNgP0kDZCGFbUAphBB6dgk7WxMnwKmP6vsY7fV7g=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script>
  const locations = [
    { name: "Alfamart", lat: 3.5784, lng: 98.6789 },
    { name: "Indomaret", lat: 3.5953, lng: 98.6743 },
    { name: "Alfamidi", lat: 3.5952, lng: 98.678 },
  ];

  const map = L.map("map").setView([3.5952, 98.678], 13);

  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
  }).addTo(map);

  const icons = {
    start: L.icon({
      iconUrl:
        "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [0, -41],
    }),
    user: L.icon({
      iconUrl:
        "https://cdn2.iconfinder.com/data/icons/font-awesome/1792/map-marker-32.png",
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32],
    }),
  };

  function calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371; // Earth radius in kilometers
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLng = ((lng2 - lng1) * Math.PI) / 180;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) *
        Math.cos((lat2 * Math.PI) / 180) *
        Math.sin(dLng / 2) *
        Math.sin(dLng / 2);
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // distance in kilometers
  }

  function findClosestMart(userLat, userLng) {
    let closestMart = null;
    let minDistance = Infinity;

    locations.forEach((location) => {
      const distance = calculateDistance(
        userLat,
        userLng,
        location.lat,
        location.lng
      );
      if (distance < minDistance) {
        minDistance = distance;
        closestMart = location;
      }
    });
    return closestMart;
  }

  function displayRoute(startLat, startLng, endLat, endLng) {
    L.Routing.control({
      waypoints: [L.latLng(startLat, startLng), L.latLng(endLat, endLng)],
      routeWhileDragging: false,
      lineOptions: { styles: [{ color: "blue", opacity: 0.7, weight: 5 }] },
      createMarker: () => null,
    }).addTo(map);

    map.fitBounds([
      [startLat, startLng],
      [endLat, endLng],
    ]);
  }

  function updateDeliveryAndTotal(distance) {
    const deliveryCost = Math.round(distance) * 2500;
    let currTotal = new Decimal(
      document
        .getElementById("total")
        .innerText.replace("Rp", "")
        .replaceAll(".", "")
        .replace(",", ".")
        .trim()
    );
    currTotal = currTotal.plus(deliveryCost);

    // Format to Rupiah (IDR)
    const rupiahFormatter = new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
    });

    // Update delivery and total
    document.getElementById("delivery").innerText =
      rupiahFormatter.format(deliveryCost);
    document.getElementById("total").innerText =
      rupiahFormatter.format(currTotal);
  }

  function handleLocation(lat, lng) {
    const closestMart = findClosestMart(lat, lng);

    if (closestMart) {
      L.marker([lat, lng], { icon: icons.user })
        .addTo(map)
        .bindPopup("You are here")
        .openPopup();

      L.marker([closestMart.lat, closestMart.lng], { icon: icons.start })
        .addTo(map)
        .bindPopup(closestMart.name)
        .openPopup();
    }
  }

  // Wait until the "Order Driver" button is clicked
  document.getElementById("order").addEventListener("click", () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const userLat = pos.coords.latitude;
          const userLng = pos.coords.longitude;

          handleLocation(userLat, userLng);

          // Find closest mart and display route
          const closestMart = findClosestMart(userLat, userLng);

          if (closestMart) {
            displayRoute(userLat, userLng, closestMart.lat, closestMart.lng);

            // Calculate and update delivery and total cost
            const distance = calculateDistance(
              userLat,
              userLng,
              closestMart.lat,
              closestMart.lng
            );
            updateDeliveryAndTotal(distance);
          }
        },
        () => {
          alert("Unable to retrieve your location.");
        }
      );
    } else {
      alert("Geolocation is not supported by this browser.");
    }
  });
</script>
