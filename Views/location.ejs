<title>GoMart Driver App</title>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
<style>
    body {
        font-family: "Arial", sans-serif;
        background-color: #f4f7f6;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
    }

    h1 {
        font-size: 36px;
        color: #333;
        margin-top: 20px;
        font-weight: bold;
        text-align: center;
    }

    #map {
        width: 100%;
        height: 500px;
        margin: 20px 0;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    }

    .leaflet-container {
        border-radius: 12px;
    }

    .leaflet-routing-container .leaflet-routing-alt {
        display: none;
    }

    #driver {
        font-size: 18px;
        font-weight: bold;
        color: #333;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 100%;
        margin: 20px 0;
        text-align: center;
    }

    .driver-info {
        background-color: #4caf50;
        color: white;
        padding: 10px;
        border-radius: 6px;
        margin: 10px 0;
        font-size: 16px;
    }

    .distance-info {
        background-color: #ff9800;
        color: white;
        padding: 10px;
        border-radius: 6px;
        margin: 10px 0;
        font-size: 16px;
    }

    .popup-custom {
        font-weight: bold;
        color: #4caf50;
    }

    @media (max-width: 768px) {
        #map {
            width: 100%;
            height: 400px;
        }

        h1 {
            font-size: 28px;
        }

        #driver {
            width: 90%;
        }
    }
</style>

<body>
    <h1>GoMart Driver App</h1>
    <div id="map"></div>
    <div id="driver"></div>
</body>

<script>
    const locations = [
        { name: "Alfamart", lat: 3.5784, lng: 98.6789 },
        { name: "Indomaret", lat: 3.5953, lng: 98.6743 },
        { name: "Alfamidi", lat: 3.5952, lng: 98.678 },
    ];

    const drivers = [
        { name: "John Doe", vehicle: "BK 5342 AAA" },
        { name: "Jane Smith", vehicle: "BK 5678 AMD" },
        { name: "Robert Brown", vehicle: "BK 9101 ALZ" },
        { name: "Emily Davis", vehicle: "BK 1122 AIF" },
        { name: "Michael Johnson", vehicle: "BK 3344 AOJ" }
    ];

    const selectedDriver = drivers[Math.floor(Math.random() * drivers.length)];

    var map = L.map("map").setView([3.5952, 98.678], 13);

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    const startIcon = L.icon({
        iconUrl:
            "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [0, -41],
    });

    const userIcon = L.icon({
        iconUrl:
            "https://cdn2.iconfinder.com/data/icons/font-awesome/1792/map-marker-32.png",
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32],
    });

    function calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371;
        const dLat = ((lat2 - lat1) * Math.PI) / 180;
        const dLng = ((lng2 - lng1) * Math.PI) / 180;
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos((lat1 * Math.PI) / 180) *
            Math.cos((lat2 * Math.PI) / 180) *
            Math.sin(dLng / 2) *
            Math.sin(dLng / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;

                const randomLocation =
                    locations[Math.floor(Math.random() * locations.length)];

                const userMarker = L.marker([userLat, userLng], {
                    icon: userIcon,
                }).addTo(map);
                userMarker.bindPopup("You are here").openPopup();

                const startMarker = L.marker(
                    [randomLocation.lat, randomLocation.lng],
                    { icon: startIcon }
                ).addTo(map);
                startMarker.bindPopup(randomLocation.name).openPopup();

                const distance = calculateDistance(userLat, userLng, randomLocation.lat, randomLocation.lng);

                const driverInfo = `
                    <div class="driver-info">
                        <strong>Driver:</strong> ${selectedDriver.name}<br>
                        <strong>Vehicle:</strong> ${selectedDriver.vehicle}
                    </div>
                    <div class="distance-info">
                        <strong>Distance:</strong> ${distance.toFixed(2)} km
                    </div>
                `;
                document.getElementById('driver').innerHTML = driverInfo;

                L.Routing.control({
                    waypoints: [
                        L.latLng(randomLocation.lat, randomLocation.lng),
                        L.latLng(userLat, userLng),
                    ],
                    routeWhileDragging: false,
                    lineOptions: {
                        styles: [{ color: "green", opacity: 0.7, weight: 5 }],
                    },
                    createMarker: function () {
                        return null;
                    },
                }).addTo(map);

                map.fitBounds([
                    [userLat, userLng],
                    [randomLocation.lat, randomLocation.lng],
                ]);
            },
            (error) => {
                alert("Unable to retrieve your location. Using default location.");
                const fallbackLat = 3.5952;
                const fallbackLng = 98.678;

                const randomLocation =
                    locations[Math.floor(Math.random() * locations.length)];

                const userMarker = L.marker([fallbackLat, fallbackLng], {
                    icon: userIcon,
                }).addTo(map);
                userMarker.bindPopup("Fallback Location: Medan").openPopup();

                const startMarker = L.marker(
                    [randomLocation.lat, randomLocation.lng],
                    { icon: startIcon }
                ).addTo(map);
                startMarker.bindPopup(randomLocation.name).openPopup();
                const distance = calculateDistance(fallbackLat, fallbackLng, randomLocation.lat, randomLocation.lng);

                const driverInfo = `
                    <div class="driver-info">
                        <strong>Driver:</strong> ${selectedDriver.name}<br>
                        <strong>Vehicle:</strong> ${selectedDriver.vehicle}
                    </div>
                    <div class="distance-info">
                        <strong>Distance:</strong> ${distance.toFixed(2)} km
                    </div>
                `;
                document.getElementById('driver').innerHTML = driverInfo;

                L.Routing.control({
                    waypoints: [
                        L.latLng(randomLocation.lat, randomLocation.lng),
                        L.latLng(fallbackLat, fallbackLng),
                    ],
                    routeWhileDragging: false,
                    lineOptions: {
                        styles: [{ color: "green", opacity: 0.7, weight: 5 }],
                    },
                    createMarker: function () {
                        return null;
                    },
                }).addTo(map);

                map.fitBounds([
                    [fallbackLat, fallbackLng],
                    [randomLocation.lat, randomLocation.lng],
                ]);
            }
        );
    } else {
        alert("Geolocation is not supported by this browser.");
    }
</script>